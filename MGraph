#include <stdio.h>
#include <stdlib.h>
#define MAX_VALUE 27289
#define MAX_VERTEX 26
/*定义顶点结构*/
typedef char VType;//顶点类型
typedef int WType;//权重类型
typedef struct MGraph
{
    int numVter,numEdge;//定点个数,边的个数
    VType* V;//顶点表
    WType** Edge;//邻接矩阵
} MGraph;

/*初始化*/
void Init_MGraph (MGraph* G)
{
    int i,j;
    //将顶点数和边数初始化为0
    G->numEdge=0;
    G->numVter=0;
    //创建顶点表
    G->V=(VType*)malloc(sizeof(VType)*MAX_VERTEX);
    if(!G->V){
        printf("No enough space!\n");
        exit(0);
    }
    G->Edge=(WType**)malloc(sizeof(WType)*MAX_VERTEX);
    if(!G->Edge){
        printf("No enough space!\n");
        exit(0);
    }
    for(i=0;i<MAX_VERTEX;i++){
        G->Edge[i]=(WType*)malloc(sizeof(WType)*MAX_VERTEX);
        if(!G->Edge[i]){
            printf("No enough space!\n");
            exit(0);
        }
    }
    //初始化邻接矩阵
    for(i=0;i<MAX_VERTEX;i++){
            G->V[i]=0;
        for(j=0;j<MAX_VERTEX;j++){
            G->Edge[i][j]=MAX_VALUE;
        }
    }
}
//返回图中当前顶点的个数
int GteNumOfVertex(MGraph*G)
{
    return G->numVter;
}
//返回图中边点的个数
int GetNumOfEdge(MGraph*G)
{
    return G->numEdge;
}
//返回顶点在图中的位置
int GetVetertexPos(MGraph*G,VType v)
{
    int i;
    for(i=0;i<G->numVter;i++){
        if(G->V[i]==v)
            return i;
    }
    return -1;
}
//返回顶点号i对应的值
VType GetValueOfVtertex(MGraph*G,int i)
{
    return G->V[i];
}
//返回顶点v1，v2，边的权重
WType GetWeightOfGraph(MGraph*G,int v1,int v2)
{
    if(-1!=v1&&-1!=v2)
        return G->Edge[v1][v2];
    else
        return 0;
}

//创建图
void MGraph_Creat(MGraph*G,int v,int e)
{
    int i,j,k,type;
    VType v1,v2;
    WType weight;
    G->numEdge=e;
    G->numVter=v;
    for(i=0;i<v;i++){//输入顶点表
        scanf("%c",&G->V[i]);
    }
    i=0;
    getchar();
    printf("the type of graph:0 or 1\n");
    scanf("%d",&type);
    getchar();
    while(i<e){
        scanf("%c %c %d",&v1,&v2,&weight);
        j=GetVetertexPos(G,v1);
        k=GetVetertexPos(G,v2);
       if(-1!=j&&-1!=k){
         G->Edge[j][k]=weight;
        if(type)//如果是无向图
           {

            G->Edge[k][j]=weight;
              i++;
            }
            else
                i++;
       }
       else{
        printf("input veter error!");
       }
getchar();
    }
}
//输出图
void PrintGraph(MGraph*G)
{
    int i,j,w;
    //输出顶点数
    printf("图的顶点数为：\n%d\n",G->numVter);
    //输出顶点列表的值
    printf("顶点列表的值：\n");
    for(i=0;i<G->numVter;i++){
        printf("%c  ",G->V[i]);
    }
    printf("\n");
    printf("图的边数为：\n%d\n",G->numEdge);
    printf("图的邻接矩阵如下：\n");
    for(i=0;i<G->numVter;i++){
        for(j=0;j<G->numVter;j++){
            w=G->Edge[i][j];
            if(w==MAX_VALUE)
                w=0;
            printf("%d    ",w);
        }
        printf("\n");
    }
}
int main()
{
    MGraph G;
    Init_MGraph(&G);
    MGraph_Creat(&G,5,6);
    PrintGraph(&G);
    printf("Hello world!\n");
    return 0;
}
